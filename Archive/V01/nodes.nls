; Define the breed for nodes
breed [nodes node]
undirected-link-breed [ roads road ]
roads-own [  
  r-id
  distance_to_destination
  speed_limmit
  occupants
]

nodes-own[
  n-id
  n-xpos
  n-ypos
]



; Initialize nodes
to nodes-init [number-of-nodes]
  nw:generate-ring nodes roads number-of-nodes   ; Uses network extention creates random netwrk with low connectivity
  [ 
    set color blue  ; Set the color of the nodes
    set shape "circle" ; Set the shape of the nodes
    set size 0.4 ; Set the size of the nodes
  ]
  ;; Lay out the nodes so links are not overlapping
 layout-circle sort nodes 10
  ;; Leave space around the edges
  ask nodes [ setxy 0.95 * xcor 0.95 * ycor ]
  
  ask roads [
    let turtle1 end1
    let turtle2 end2
    let link-distance 0  
    set occupants [ ]
    ;; Calculate distance between the two nodes connected by the road
    ask turtle1 [  
      set link-distance distance turtle2
    ]
    set distance_to_destination link-distance
    
    ;; Assign a speed limit to the road
    ifelse random-float 1.0 < 0.7[
      set speed_limmit restricted-road-speed
      set color yellow  ; Color yellow for restricted roads
    ][
      set speed_limmit 1.0
    ]
     ;; Set the thickness of the road based on the speed limit
    set thickness speed_limmit * 0.4
  ]
end


; Lay out the nodes using a spring layout algorithm
to layout
  layout-spring nodes links 0.01 1 1
end

to add-vehicle [ a-vehicle ]
  set occupants lput a-vehicle occupants
end

to remove-vehcile [ a-vehcile ]
  set occupants remove position a-vehcile occupants occupants
end