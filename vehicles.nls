breed [vehicles vehicle] ; Define a new breed called "vehicles"

vehicles-own [
  location            ; Current location of the vehicle
  destination         ; Destination of the vehicle
  top-speed           ; Maximum speed of the vehicle
  speed               ; Current speed of the vehicle
  speed-restriction   ; Local speed restriction
  journey            ; Total distance of the current journey
  remaing-journey     ; Remaining distance of the current journey
  trip                ; the path to utimate destination
]

to vehicles-init [number-of-vehicles]
  create-vehicles number-of-vehicles [
    set color lime                     ; Set vehicle color
    set shape "default"               ; Set vehicle shape
    let new-location one-of nodes
    let new-destination new-location
    while [ new-destination = new-location ] [
      set new-destination one-of nodes
    ]
    
    ;write new-location
    ;write new-destination
    let new-trip 0
    ask new-location [ set new-trip nw:path-to new-destination]
    let new-road 0
    set trip new-trip
   
    ; Assign a random destination and road to the vehicle
    ask new-location [
      set new-road one-of my-roads
    ]
    if not empty? trip [
      set-destination new-location ;new-journey; new-road 

      set top-speed ( random-float ( 1.0 - 0.4 ) ) + 0.4  ; Set random maximum speed
      set speed top-speed                  ; Set initial speed to maximum speed
      set remaing-journey journey   ; Set initial remaining journey
    ]
  ]
end

to vehicles-move
  if not empty? trip [
  let visible-neighbors (other turtles in-cone 0.2 10) ; Identify nearby vehicles
  let ahead nearest-vehicle-traverling-in-same-direction ; Find the nearest vehicle ahead

  ; Adjust speed based on traffic conditions
  set speed top-speed
  set color lime
  if ahead != nobody [
    ifelse distance ahead < speed [
      set speed 0 ; Stop if too close
      set color red ; Indicate stopped
    ] [
      if distance ahead < 2 * speed [
        let ahead-speed [speed] of ahead ; Get the speed of the vehicle ahead
        if ahead-speed <= speed [
          set speed ahead-speed  ; Reduce speed to avoid collision
        ]
        set color orange ; Indicate reduced speed
      ]
    ]
  ]
if speed > speed-restriction [
    set speed speed-restriction
  ]

  fd speed ; Move forward
  set remaing-journey distance destination ; Update remaining journey distance
  ; If the vehicle reaches its destination, find a new one
  if distance location >= journey [
    let difference distance location - journey ; Calculate remaining distance
    set-destination destination 
    set speed difference 
      if speed > speed-restriction [
    set speed speed-restriction
  ]

  fd speed ; Move forward
  set remaing-journey distance destination ; Update remaining journey distance
  ]

  ; Enforce speed limit
  
  ]
end

to-report nearest-vehicle-traverling-in-same-direction
  report min-one-of other vehicles with [  
    destination = [destination] of myself and  ; Same destination
    remaing-journey < [remaing-journey] of myself and  ; Shorter remaining journey
    heading = [heading] of myself ; Same direction
  ] [distance myself]
end

to set-destination [new-location]
  let new-road first trip
  set trip but-first trip
  let new-destination 0
  ;select the correct end of the road for the new destination
  ask  new-road [  
      ifelse end1 = new-location[
         set new-destination end2
      ][
        set new-destination end1
      ]
  ]
  set speed-restriction [speed_limmit] of new-road
  set location new-location
  set destination new-destination
  move-to location                   ; Move to the new location
  face destination                   ; Face the new destination
  set journey distance destination
end