; Define a breed for vehicles
breed [vehicles vehicle]

; Define variables for vehicles
vehicles-own [
  v-id          ; Vehicle ID
  v-home        ; Home node for the vehicle
  v-destination ; Destination node for the vehicle
  current-road  ; The road the vehicle is currently on
  trip          ; The path for the vehicle to follow
  current-node  ; The current node the vehicle is at
  next-node     ; The next node the vehicle will move to
  speed         ; The speed of the vehicle
]

; Procedure to create a new vehicle
to new_vehicle [ n ]
  ; Set the current node and v-id based on the input node
  set current-node [n-id] of node n
  set v-id n

  ; Move the turtle to the node and set its appearance
  move-to node n
  set color orange
  set size 1.5

  ; Set the speed of the vehicle
  set speed random-float 0.9 + 0.1

  ; Initialize the trip and set the home and destination nodes
  let new-trip nobody
  set v-home node n
  set v-destination node ( ( current-node - 1 ) mod 4 )

  ; Calculate the path from the home node to the destination node
  ask v-home [ set new-trip nw:path-to [ v-destination ] of myself ]

  ; Set the trip variable for the vehicle
  set trip new-trip

  ; Initialize the current-road and next-node variables
  set current-road nobody
  set next-node nobody
end

; Procedure to set a new road for the vehicle to move on
to set-new-road [ move-distance ]
  if current-road != nobody [
    ; Remove the vehicle from the current road's traffic list
    ask current-road [
      ifelse is-list? traffic [
        if member? myself traffic [
          set traffic remove myself traffic
        ]
      ][
        if traffic = myself [
          set traffic nobody
        ]
      ]
    ]
  ]

  ; Set the current-road and update the trip variable
  set current-road first trip
  set trip but-first trip

  ; Add the vehicle to the new road's traffic list
  ask current-road [
    ifelse traffic = nobody [
      set traffic myself
    ][
      set traffic list traffic myself
    ]
  ]

  ; Set the next-node based on the current road
  if next-node != nobody [
    move-to next-node
  ]

  ; Set the next-node
  set next-node [ end2 ] of current-road

  ; Face the next-node
  face next-node

  ; Move the vehicle along the road
  fd move-distance
end

; Procedure to check if the vehicle has reached the end of the current road
to check-end-road
  if distance next-node <= speed [

    ; Calculate the remaining distance to move on the current road
    let move-distance distance next-node - speed

    ; Set a new road for the vehicle to move on
    ifelse not empty? trip [
    set-new-road move-distance
    ][
      set speed 0
    ] 
    
  ]
end

; Procedure to move the vehicle
to move-vehicle
  ; Check if the vehicle has reached the end of the current road
  check-end-road

  ; Move the vehicle forward by its speed
  fd speed
end
