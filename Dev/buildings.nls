 ;; Define a breed for buildings
breed [buildings building]

; Define the variables for buildings
buildings-own[
  b-type ; type of building
  b-xpos ; x-position of building
  b-ypos ; y-position of building
  b-id ; ID of building
  nearest-node ; nearest node to building
]

; Procedure to load buildings from a CSV file
to load-buildings
  ;; Set the network context to nodes and roads
  nw:set-context nodes roads

  ;; Load the house list from a CSV file
  let csv-data csv:from-file "Data/house_list.csv"

  ;; Separate the header row from the data rows
  let header-row first csv-data
  let data-rows butfirst csv-data

  ;; Loop through the data rows and create houses
  foreach data-rows [
    row ->
    create-buildings 1 [
      ;; Set the building's ID, x-position, y-position, shape, size, color, and type
      set b-id (item 0 row )
      set b-xpos  item 1 row  * max-pxcor
      set b-ypos  item 2 row  * max-pycor
      set shape "square"
      set size 1
      set color blue
      setxy b-xpos b-ypos
      set b-type  "home"
      ;; Set the nearest node to the building
      set nearest-node min-one-of nodes [distance myself ] 
   ]
  ]

  ;; Load the building list from a CSV file
  set csv-data csv:from-file "Data/building_list.csv"

  ;; Separate the header row from the data rows
  set header-row first csv-data
  set data-rows butfirst csv-data

  ;; Loop through the data rows and create buildings
  foreach data-rows [
    row ->
    create-buildings 1 [
      ;; Set the building's ID, x-position, y-position, shape, size, color, and type
      set b-id (item 0 row )
      set b-xpos  item 1 row  * max-pxcor
      set b-ypos  item 2 row  * max-pycor
      set shape "square"
      set size 1
      set color red
      setxy b-xpos b-ypos
      set b-type  "building"
      ;; Set the nearest node to the building
      set nearest-node min-one-of nodes [distance myself ] 
   ]
  ]
end