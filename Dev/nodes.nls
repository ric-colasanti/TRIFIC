; Define the breed for nodes
breed [nodes node]
undirected-link-breed [ roads road ]
roads-own [  
  r-id
  distance_to_destination
  speed_limmit
]

nodes-own[
  n-id
  n-xpos
  n-ypos
]



to load-network
  nw:set-context nodes roads
  let csv-data csv:from-file "Data/node_list.csv"

  let header-row first csv-data
  let data-rows butfirst csv-data
  foreach data-rows [
    row ->
    create-nodes 1 [
      set n-id (item 0 row )
      set n-xpos  item 1 row  * 320
      set n-ypos  item 2 row  * 320
      set shape "circle"
      set size 1
      set color blue
      setxy n-xpos n-ypos
   ]
  ]

  set csv-data csv:from-file "Data/link_list.csv"

  set header-row first csv-data
  set data-rows butfirst csv-data
  foreach data-rows [
    row ->
      let link-distance 0
      let t1   one-of nodes with [ n-id = item 1 row ]
      let t2   one-of nodes with [ n-id = item 2 row ]
    ifelse t1 != nobody and t2 != nobody [
      ask t1 [
        set link-distance distance t2
        create-road-with t2 [
           set r-id item 0 row
          set color gray
          set distance_to_destination link-distance
          
          set speed_limmit 1.0
          set thickness speed_limmit * 0.4
        ]
      ]
    ][
      print " missing"
    ]
  ]
  
end
; Initialize nodes
to nodes-init [number-of-nodes]
  nw:generate-preferential-attachment nodes roads number-of-nodes 1  ; Uses network extention creates random netwrk with low connectivity
  [ 
    set color blue  ; Set the color of the nodes
    set shape "circle" ; Set the shape of the nodes
    set size 0.4 ; Set the size of the nodes
  ]
  ;; Lay out the nodes so links are not overlapping
  repeat 500 [ layout ]
  ;; Leave space around the edges
  ask nodes [ setxy 0.95 * xcor 0.95 * ycor ]
  
  ask roads [
    let turtle1 end1
    let turtle2 end2
    let link-distance 0  
    ;; Calculate distance between the two nodes connected by the road
    ask turtle1 [  
      set link-distance distance turtle2
    ]
    set distance_to_destination link-distance
    
    ;; Assign a speed limit to the road
    ifelse random-float 1.0 < 0.7[
      set speed_limmit restricted-road-speed
      set color yellow  ; Color yellow for restricted roads
    ][
      set speed_limmit 1.0
    ]
     ;; Set the thickness of the road based on the speed limit
    set thickness speed_limmit * 0.4
  ]
end


; Lay out the nodes using a spring layout algorithm
to layout
  layout-spring nodes links 0.01 1 1
end

